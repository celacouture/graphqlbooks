{"version":3,"sources":["queries/queries.js","components/BookDetails.js","components/BookList.js","components/AddBook.js","App.js","index.js"],"names":["getBooksQuery","gql","_templateObject","getAuthorsQuery","_templateObject2","addBookMutation","_templateObject3","getBookQuery","_templateObject4","BookDetails","book","this","props","data","react_default","a","createElement","name","genre","author","className","books","map","item","key","id","displayBookDetails","Component","graphql","options","variables","bookId","BookList","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","selected","_this2","loading","onClick","e","setState","displayBooks","components_BookDetails","AddBook","authorId","disabled","authors","value","preventDefault","refetchQueries","query","onSubmit","submitForm","bind","type","onChange","target","displayAuthors","compose","client","ApolloClient","uri","App","react_apollo_browser_umd","components_BookList","components_AddBook","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.554c5ca0.chunk.js","sourcesContent":["import {gql} from 'apollo-boost';\n\nconst getBooksQuery = gql`\n{\n  books{\n    name\n    id\n  }\n}\n`\n\nconst getAuthorsQuery = gql`\n{\n  authors{\n    name\n    id\n  }\n}\n`\n\nconst addBookMutation = gql`\n  mutation($name: String!, $genre:String!, $authorId:ID!){\n    addBook(\n      name:$name,\n      genre:$genre,\n      authorId:$authorId\n    ){\n      name\n      id\n    }\n  }\n`\n\nconst getBookQuery = gql`\n  query($id:ID){\n    book(id:$id){\n      id\n      name\n      genre\n      author{\n        id\n        name\n        age\n        books{\n          name\n          genre\n          id\n        }\n      }\n    }\n  }\n`\n\nexport{getBooksQuery, getAuthorsQuery, addBookMutation, getBookQuery};","import React, { Component } from 'react';\nimport {graphql} from 'react-apollo';\nimport {getBookQuery} from '../queries/queries';\n\nclass BookDetails extends Component{\n  displayBookDetails(){\n    const { book } = this.props.data;\n    if(book){\n        return(\n            <div>\n                <h2>{ book.name }</h2>\n                <p>{ book.genre }</p>\n                <p>{ book.author.name }</p>\n                <p>All books by this author:</p>\n                <ul className=\"other-books\">\n                    { book.author.books.map(item => {\n                        return <li key={item.id}>{ item.name }</li>\n                    })}\n                </ul>\n            </div>\n        );\n    } else {\n        return( <div>No book selected...</div> );\n    }\n}\n\n  render(){\n    return(\n      <div id=\"book-details\">\n      {this.displayBookDetails()}\n      </div>\n    )\n  }\n}\n\nexport default graphql(getBookQuery, {\n  options:(props) =>{\n    return {\n      variables:{\n        id:props.bookId\n      }\n    }\n  }\n})(BookDetails);","import React, { Component } from 'react';\nimport {graphql} from 'react-apollo';\nimport {getBooksQuery} from '../queries/queries';\n\n//components \nimport BookDetails from './BookDetails';\n\n\nclass BookList extends Component {\nconstructor(props){\n  super(props);\n  this.state={\n    selected: null\n  }\n}\n  displayBooks(){\n    var data = this.props.data;\n    if(data.loading){\n      return(<div>Loading Books</div>)\n    }else{\n      return data.books.map(book => {\n        return (<li key={book.id} onClick={(e)=> {this.setState({selected:book.id})}}>{book.name}</li>)\n      })\n    }\n  }\n  render() {\n    return (\n      <div>\n       <ul id=\"book-list\">\n       {this.displayBooks()}\n       </ul>\n       <BookDetails bookId={this.state.selected}/>\n      </div>\n    );\n  }\n}\n\nexport default graphql(getBooksQuery)(BookList);","import React, { Component } from 'react';\nimport {graphql, compose} from 'react-apollo';\nimport {getAuthorsQuery, addBookMutation, getBooksQuery} from '../queries/queries';\n\n\nclass AddBook extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      name:'',\n      genre:'',\n      authorId:''\n    }\n  }\n  displayAuthors(){\n    var data = this.props.getAuthorsQuery;\n    if(data.loading){\n        return( <option disabled>Loading authors</option> );\n    } else {\n        return data.authors.map(author => {\n            return( <option key={ author.id } value={author.id}>{ author.name }</option> );\n        });\n    }\n  }\n\n  submitForm(e){\n    e.preventDefault();\n    this.props.addBookMutation({\n      variables:{\n        name:this.state.name,\n        genre:this.state.genre,\n        authorId:this.state.authorId\n      },\n      refetchQueries:[{\n        query:getBooksQuery\n      }]\n    })\n    \n  }\n  render() {\n    return (\n      <form id=\"add-book\" onSubmit={this.submitForm.bind(this)}>\n          <div className=\"field\">\n              <label>Book name:</label>\n              <input type=\"text\" onChange={(e)=>this.setState ({name:e.target.value})}/>\n          </div>\n          <div className=\"field\">\n              <label>Genre:</label>\n              <input type=\"text\" onChange={(e)=>this.setState ({genre:e.target.value})}/>\n          </div>\n          <div className=\"field\">\n              <label>Author:</label>\n                 <select onChange={(e)=>this.setState ({authorId:e.target.value})}>\n                    <option>Select author</option>\n                       { this.displayAuthors() }\n                  </select>\n           </div>\n            <button>+</button>\n      </form>\n    );\n  }\n}\n\nexport default compose(\n  graphql(getAuthorsQuery, {name:\"getAuthorsQuery\"}),\n  graphql(addBookMutation, {name:\"addBookMutation\"})\n)(AddBook);","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport {ApolloProvider} from 'react-apollo';\n\nimport BookList from './components/BookList';\nimport AddBook from './components/AddBook';\n\n//apollo client set up \nconst client = new ApolloClient({\n  uri:'/graphql'\n})\n\nclass App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n      <div id=\"main\">\n        <h1>Book Club: Book Collection</h1>\n        <BookList />\n        <AddBook />\n      </div>\n      </ApolloProvider>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}